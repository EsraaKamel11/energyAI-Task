name: EV Charging LLM Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      run_full_pipeline:
        description: 'Run complete ML pipeline'
        required: false
        default: 'true'

      run_monitoring:
        description: 'Start monitoring stack'
        required: false
        default: 'false'

env:
  PYTHON_VERSION: '3.9'
  PIP_CACHE_DIR: ~/.cache/pip
  DOCKER_BUILDKIT: 1

jobs:
  infrastructure-check:
    name: Infrastructure Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check CI/CD setup
      run: |
        echo "🔍 Checking CI/CD setup..."
        if [ -f ".github/workflows/ml-pipeline.yml" ]; then
          echo "✅ CI/CD workflow found"
        else
          echo "❌ CI/CD workflow missing"
          exit 1
        fi
        
    - name: Check Docker setup
      run: |
        echo "🔍 Checking Docker setup..."
        if [ -f "ml_pipeline/docker/Dockerfile" ] && [ -f "ml_pipeline/docker-compose.monitoring.yml" ]; then
          echo "✅ Docker files found"
        else
          echo "⚠️ Some Docker files missing"
        fi
        
    - name: Check monitoring setup
      run: |
        echo "🔍 Checking monitoring setup..."
        monitoring_files=(
          "ml_pipeline/monitoring/prometheus.yml"
          "ml_pipeline/monitoring/alertmanager.yml"
          "ml_pipeline/monitoring/rules/alerts.yml"
          "ml_pipeline/monitoring/grafana/dashboards/ml-pipeline-dashboard.json"
          "ml_pipeline/monitoring/grafana/datasources/prometheus.yml"
          "ml_pipeline/start_monitoring.py"
        )
        
        missing_files=()
        for file in "${monitoring_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -eq 0 ]; then
          echo "✅ All monitoring files found"
        else
          echo "⚠️ Missing monitoring files:"
          printf '%s\n' "${missing_files[@]}"
        fi

  test:
    name: Test Pipeline
    runs-on: ubuntu-latest
    needs: infrastructure-check
    
    strategy:
      matrix:
        python-version: [3.9, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git curl wget
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
        
    - name: Lint with flake8
      run: |
        flake8 ml_pipeline/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 ml_pipeline/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run unit tests
      run: |
        cd ml_pipeline
        python -m pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ml_pipeline/coverage.xml
        flags: unittests
        name: codecov-umbrella

# Integration tests temporarily disabled for debugging
# integration-test:
#   name: Integration Test
#   runs-on: ubuntu-latest
#   needs: test
#   
#   steps:
#   - name: Checkout code
#     uses: actions/checkout@v4
#     
#   - name: Set up Python
#     uses: actions/setup-python@v4
#     with:
#       python-version: '3.9'
#       
#   - name: Install dependencies
#     run: |
#       python -m pip install --upgrade pip
#       pip install -r requirements.txt
#       pip install pytest
#       
#   - name: Run integration tests
#     run: |
#       cd ml_pipeline
#       python -m pytest tests/integration/ -v

# Performance tests temporarily disabled for debugging
# performance-test:
#   name: Performance Test
#   runs-on: ubuntu-latest
#   needs: test
#   
#   steps:
#   - name: Checkout code
#     uses: actions/checkout@v4
#     
#   - name: Set up Python
#     uses: actions/setup-python@v4
#     with:
#       python-version: '3.9'
#       
#   - name: Install dependencies
#     run: |
#       python -m pip install --upgrade pip
#       pip install -r requirements.txt
#       pip install pytest
#       
#   - name: Run performance tests
#     run: |
#       cd ml_pipeline
#       python -m pytest tests/performance/ -v
        
  ml-pipeline:
    name: Run Enhanced ML Pipeline
    runs-on: ubuntu-latest
    needs: [test]  # Removed integration-test and performance-test dependencies
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event.inputs.run_full_pipeline == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml pytest pytest-cov flake8 pydantic_settings trafilatura prometheus_fastapi_instrumentator
        
    - name: Set up environment variables
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        echo "WANDB_API_KEY=${{ secrets.WANDB_API_KEY }}" >> $GITHUB_ENV
        echo "HUGGINGFACE_TOKEN=${{ secrets.HUGGINGFACE_TOKEN }}" >> $GITHUB_ENV
        echo "HF_TOKEN=${{ secrets.HUGGINGFACE_TOKEN }}" >> $GITHUB_ENV
        
    - name: Run Enhanced ML Pipeline
      run: |
        python main.py
        
    - name: Upload pipeline outputs
      uses: actions/upload-artifact@v4
      with:
        name: pipeline-outputs
        path: ml_pipeline/pipeline_output/
        
    - name: Upload trained models
      uses: actions/upload-artifact@v4
      with:
        name: trained-models
        path: ml_pipeline/pipeline_output/qlora_training/
        if-no-files-found: ignore
        
    - name: Upload QLoRA models
      uses: actions/upload-artifact@v4
      with:
        name: qlora-models
        path: ml_pipeline/pipeline_output/qlora_training/
        if-no-files-found: ignore
        
    - name: Upload evaluation results
      uses: actions/upload-artifact@v4
      with:
        name: evaluation-results
        path: ml_pipeline/pipeline_output/*.json
        if-no-files-found: ignore
        
  monitoring:
    name: Start Monitoring Stack
    runs-on: ubuntu-latest
    needs: [ml-pipeline]
    if: github.event.inputs.run_monitoring == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download pipeline outputs
      uses: actions/download-artifact@v4
      with:
        name: pipeline-outputs
        path: ml_pipeline/pipeline_output/
        
    - name: Start monitoring stack
      run: |
        cd ml_pipeline
        python start_monitoring.py &
        sleep 30  # Wait for services to start
        
    - name: Test monitoring endpoints
      run: |
        # Test Prometheus
        curl -f http://localhost:9090/api/v1/status/config || echo "Prometheus not ready"
        
        # Test Grafana
        curl -f http://localhost:3000/api/health || echo "Grafana not ready"
        
        # Test Alertmanager
        curl -f http://localhost:9093/api/v1/status || echo "Alertmanager not ready"
        

        
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [ml-pipeline]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push ML Pipeline image
      uses: docker/build-push-action@v4
      with:
        context: ./ml_pipeline
        file: ./ml_pipeline/docker/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ev-charging-llm:latest
          ${{ secrets.DOCKER_USERNAME }}/ev-charging-llm:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Streamlit image
      uses: docker/build-push-action@v4
      with:
        context: ./ml_pipeline
        file: ./ml_pipeline/Dockerfile.streamlit
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ev-charging-streamlit:latest
          ${{ secrets.DOCKER_USERNAME }}/ev-charging-streamlit:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push monitoring image
      uses: docker/build-push-action@v4
      with:
        context: ./ml_pipeline
        file: ./ml_pipeline/docker/Dockerfile.monitoring
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ev-charging-monitoring:latest
          ${{ secrets.DOCKER_USERNAME }}/ev-charging-monitoring:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  deployment:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply -f k8s/staging/
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Test ML pipeline API
        curl -f ${{ secrets.ML_API_URL }}/health || exit 1
        # Test monitoring endpoints
        curl -f ${{ secrets.MONITORING_URL }}/api/v1/status/config || exit 1
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: kubectl apply -f k8s/production/
        
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deployment]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deployment.result == 'success'
      run: |
        echo "🎉 Enhanced ML Pipeline completed successfully!"
        echo "🤖 ML API: ${{ secrets.ML_API_URL }}"
        echo "📈 Monitoring: ${{ secrets.MONITORING_URL }}"
        echo "🔍 Grafana Dashboard: ${{ secrets.GRAFANA_URL }}"
        echo "📊 Prometheus: ${{ secrets.PROMETHEUS_URL }}"
        echo "🚨 Alertmanager: ${{ secrets.ALERTMANAGER_URL }}"
        # Add notification logic (Slack, email, etc.)
        
    - name: Notify on failure
      if: needs.deployment.result == 'failure'
      run: |
        echo "❌ Enhanced ML Pipeline failed!"
        echo "Check the logs for more details"
        # Add failure notification logic
